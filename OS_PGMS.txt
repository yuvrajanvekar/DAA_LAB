Termwork – 1 : Linux Internal and External Commands



Termwork – 2A : FCFS Scheduling Algorithm

/*
FCFS Scheduling Program in C
*/
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int pid[15];
    int bt[15];
    int n;
    printf("Enter the number of processes : ");
    scanf("%d",&n);

    printf("Enter process id of all processes :  ");
    for(int i=0;i<n;i++){
        scanf("%d",&pid[i]);
    }

    printf("Enter burst time of all the processes : ");
    for(int i=0;i<n;i++){
        scanf("%d",&bt[i]);
    }

    int wt[n];
    wt[0]=0;
    //calculating waiting time of each process
    for(int i=1;i<n;i++){
        wt[i]=bt[i-1]+wt[i-1];
    }

    printf("Process ID      Burst Time      Waiting Time    Turnaround Time\n");
    float twt=0.0;
    float ttt=0.0;
    for(int i=0;i<n;i++){
        printf("%d\t\t",pid[i]);
        printf("%d\t\t",bt[i]);
        printf("%d\t\t",wt[i]);
        //calculating and printing turnaround time for each process
        printf("%d\t\t",bt[i]+wt[i]);
        printf("\n");
        //total waiting time
        twt+=wt[i];
        //total turnaround time
        ttt=wt[i]+bt[i];
    }
    //avg wating time
    float awt=twt/n;
    //avg turnaround time
    float att=ttt/n;

    printf("Avg. waiting time = %f\n",awt);
    printf("Avg. turnaround time = %f\n",att);


    return 0;
}























Termwork – 2B : SJF Scheduling Algorithm

/*
SJF Scheduling Program in C
*/
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,totalT=0,temp;
    float avg_wt,avg_tat;
    printf("Enter the number of processes : ");
    scanf("%d",&n);

    printf("\nEnter Burst Time:\n");
    for(i=0;i<n;i++){
        printf("p%d : ",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;
    }

    for(i=0;i<n;i++){
        for(j=0;j<n-i-1;j++){
            if(bt[j]>bt[j+1]){
                temp=bt[j];
                bt[j]=bt[j+1];
                bt[j+1]=temp;
                temp=p[j];
                p[j]=p[j+1];
                p[j+1]=temp;
            }
        }
    }
    wt[0]=0;
    tat[0]=bt[0];
    //Waiting time and turnaround time
    for(i=1;i<n;i++){
        wt[i]=0;
        wt[i]=bt[i-1]+wt[i-1];
        tat[i]=bt[i]+wt[i];
    }

    printf("Process ID      Burst Time      Waiting Time    Turnaround Time\n");
    for(int i=0;i<n;i++){
        printf("%d\t\t",p[i]);
        printf("%d\t\t",bt[i]);
        printf("%d\t\t",wt[i]);
        printf("%d\t\t",tat[i]);
        printf("\n");

        total+=wt[i];
        totalT+=tat[i];
    }

    //avg wating time
    avg_wt=(float)total/n;
    //avg turnaround time
    avg_tat=(float)totalT/n;

    printf("Avg. waiting time = %f\n",avg_wt);
    printf("Avg. turnaround time = %f\n",avg_tat);

    return 0;
}
 
Termwork – 3 : Unix Process control system calls			Date : 03/03/2025

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>

int main()
{
    pid_t pid;

    pid=fork();//Create a child process

    if(pid<0){
        perror("Fork failed");
        exit(1);
    } else if(pid==0){//child process
        printf("Child Process : PID = %d, Parent PID = %d\n",getpid(),getppid());
        sleep(2);//Simulate some work
        printf("Child Process exiting\n");
        exit(0);
    } else{
        printf("Parent Process : PID = %d, Child PID = %d\n",getpid(),pid);
        int status;
        wait(&status);//Wait for child process to complete
        printf("Parent Process :Child exited with status %d\n",WEXITSTATUS(status));
    }

    return 0;
} 
Termwork – 4 : Process Synchronization - The Dining-Philosophers Problem
Date : 03/03/2025

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>
#include <unistd.h>

pthread_t* philosophers;
pthread_mutex_t* forks;
int philosophers_count;
pthread_barrier_t barrier;  // Barrier to synchronize the start of all philosophers

void eat(int i) {
    printf("Philosopher %d is eating\n", i + 1);
    sleep(1 + rand() % 10);
}

void* philosopher(void* args) {
    int i = *((int*)args);  // Get philosopher's index directly from arguments
    int first, second;

    // Synchronize all philosophers to start together
    pthread_barrier_wait(&barrier);  // Wait for all philosophers to be ready

    while (1) {
        printf("Philosopher %d is thinking\n", i + 1);
        sleep(1 + rand() % 10);

        first = i;
        second = (i + 1) % philosophers_count;

        // Lock forks in a consistent order (lower numbered fork first)
        if (first > second) {
            first = second;
            second = i;
        }

        pthread_mutex_lock(&forks[first]);
        pthread_mutex_lock(&forks[second]);

        eat(i);

        pthread_mutex_unlock(&forks[first]);
        pthread_mutex_unlock(&forks[second]);
    }

    return NULL;
}

int main() {
    int i, err;
    srand(time(NULL)); // Seed the random number generator

    printf("Enter the number of philosophers: ");
    scanf("%d", &philosophers_count);

    philosophers = (pthread_t*)malloc(philosophers_count * sizeof(pthread_t));
    forks = (pthread_mutex_t*)malloc(philosophers_count * sizeof(pthread_mutex_t));

    // Initialize mutexes for each fork
    for (i = 0; i < philosophers_count; ++i) {
        if (pthread_mutex_init(&forks[i], NULL) != 0) {
            printf("Failed initializing fork %d\n", i + 1);
            return 1;
        }
    }

    // Initialize the barrier to synchronize the start of all threads
    if (pthread_barrier_init(&barrier, NULL, philosophers_count) != 0) {
        printf("Error initializing barrier\n");
        return 1;
    }

    // Create threads for each philosopher
    for (i = 0; i < philosophers_count; ++i) {
        int* index = (int*)malloc(sizeof(int));
        *index = i;

        err = pthread_create(&philosophers[i], NULL, philosopher, (void*)index);
        if (err != 0) {
            printf("Error creating philosopher %d: %s\n", i + 1, strerror(err));
            // Clean up already created threads and mutexes before exiting
            for (int j = 0; j < i; ++j) {
                pthread_cancel(philosophers[j]);
                pthread_join(philosophers[j], NULL);
            }
            for (int j = 0; j < i; ++j) {
                pthread_mutex_destroy(&forks[j]);
            }
            return 1;
        } else {
            printf("Successfully created philosopher %d\n", i + 1);
        }
    }

    // Join all threads
    for (i = 0; i < philosophers_count; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    // Clean up allocated memory and destroy mutexes
    for (i = 0; i < philosophers_count; ++i) {
        pthread_mutex_destroy(&forks[i]);
    }
    free(philosophers);
    free(forks);

    // Destroy the barrier
    pthread_barrier_destroy(&barrier);

    return 0;
}
 
Termwork – 5A : Process Synchronization-Reader- writer and Producer –consumer Problem
Date : 10/03/2025

#include<stdio.h>
#include<semaphore.h>
#include<unistd.h>
#include<pthread.h>

sem_t rw_mutex; // Controls access to the shared resource
sem_t mutex;    // Controls access to reader_count
int reader_count = 0; // Number of active readers
int shared_data = 0;  // Shared resource

void* reader(void* arg) {
    int reader_id = *((int*)arg);
    while (1) {
        sem_wait(&mutex);
        reader_count++;
        if (reader_count == 1) {
            sem_wait(&rw_mutex); // First reader locks the resource
        }
        sem_post(&mutex);

        // Critical Section (Reading)
        printf("Reader %d: Read shared data = %d\n", reader_id, shared_data);
        usleep(500000); // Simulating reading time

        sem_wait(&mutex);
        reader_count--;
        if (reader_count == 0) {
            sem_post(&rw_mutex); // Last reader unlocks the resource
        }
        sem_post(&mutex);
        usleep(500000);
    }
    return NULL;
}

void* writer(void* arg) {
    int writer_id = *((int*)arg);
    while (1) {
        sem_wait(&rw_mutex); // Locks the resource exclusively

        // Critical Section (Writing)
        shared_data++; // Modify shared resource
        printf("Writer %d: Wrote shared data = %d\n", writer_id, shared_data);
        usleep(500000); // Simulate writing time

        sem_post(&rw_mutex); // Release the resource
        usleep(500000);
    }
    return NULL;
}

int main() {
    pthread_t r_threads[5], w_threads[2];
    int reader_ids[5] = {1, 2, 3, 4, 5};
    int writer_ids[2] = {1, 2}; // Corrected initialization of writer_ids

    sem_init(&rw_mutex, 0, 1);  // Initialize rw_mutex for exclusive access
    sem_init(&mutex, 0, 1);     // Initialize mutex for controlling reader_count

    // Create reader and writer threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&r_threads[i], NULL, reader, &reader_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        pthread_create(&w_threads[i], NULL, writer, &writer_ids[i]);
    }

    // Join all threads (in practice, this won't be reachable due to infinite loops)
    for (int i = 0; i < 5; i++) {
        pthread_join(r_threads[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(w_threads[i], NULL);
    }

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}
 
Termwork – 5B : Process Synchronization Producer –consumer Problem
Date : 10/03/2025

#include<stdio.h>
#include<stdlib.h>
#include<semaphore.h>
#include<unistd.h>
#include<pthread.h>

#define BUFFER_SIZE 5 // Size of the buffer

int buffer[BUFFER_SIZE];
int in = 0, out = 0; // Indexes for producer and consumer

sem_t empty, full; // Semaphores for synchronization
pthread_mutex_t mutex; // Mutex for critical section

// Producer function
void* producer(void* arg) {
    int item = 1;
    while (1) {
        sleep(1); // Simulating production time
        sem_wait(&empty); // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock critical section

        // Produce an item
        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;
        item++;

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&full); // Signal that buffer is not empty
    }
}

// Consumer function
void* consumer(void* arg) {
    while (1) {
        sleep(2); // Simulating consumption time
        sem_wait(&full); // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock critical section

        // Consume an item
        int item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&empty); // Signal that buffer has space
    }
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Join threads
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores and Mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
} 
Termwork – 6 : Deadlock – Banker’s algorithm
Date : 24/03/2025

//Modified Bankers Algorithm

#include <stdio.h>

void main()
{
    int process,resource,i,j,instance,k=0,count=0,m=0,h=0,outer,p,l;
    printf("\nEnter the number of processes : ");
    scanf("%d",&process);
    l=process;
    printf("\nEnter the number of resources : ");
    scanf("%d",&resource);
    int avail[resource],max[process][resource],allot[process][resource],need[process][resource],completed[process],pending[10];
    for(i=0;i<process;i++){
        completed[i]=0;
        pending[i]=i;
    }

    printf("\nEnter number of Available Instances : ");
    for(i=0;i<resource;i++){
        scanf("%d",&avail[i]);
    }

    printf("\nEnter maximum number of instances resources that a process needs : \n");
    for(i=0;i<process;i++){
        printf("For p[%d] ",i);
        for(j=0;j<resource;j++){
            scanf("%d",&max[i][j]);
        }
    }

    printf("\nEnter number of instances already allocated to the process of a resource : \n");
        for(i=0;i<process;i++){
        printf("For p[%d] ",i);
        for(j=0;j<resource;j++){
            scanf("%d",&allot[i][j]);

            need[i][j]=max[i][j]-allot[i][j];
        }
    }

    for(outer=process;outer>=0;outer--){
        for(j=0;j<l;j++){
            i=pending[j];
            if(completed[j]!=1){
                k=0;
                for(m=0;m<resource;m++){
                    if(need[i][m]<=avail[m]){
                        k++;
                    }
                }
                if(k==resource && completed[j]==0){
                    printf("p[%d]\t",i);
                    completed[j]=1;
                    for(p=0;p<resource;p++){
                        avail[p]=avail[p]+allot[j][p];
                    }
                    count++;
                }
            }
        }
    }
    if(count==process){
        printf("\nSafe Sequence exists\n");
    }else{
        printf("Not exists\n");
    }

} 
Termwork – 7 : Memory Management - Page replacement
Date : 10/03/2025

#include <stdio.h>

#define MAX_FRAMES 3 //number of page frames
#define MAX_PAGES 10 //number of pages

//fun to check if a page is already in memory
int is_page_in_frames(int frames[],int num_frames,int page){
    for(int i=0;i<num_frames;i++){
        if(frames[i]==page)
            return 1;//page found in frames
    }
    return 0;//page not found
}

//FIFO page replacement algorithm
void fifo_page_replacement(int pages[],int num_pages,int num_frames){
    int frames[MAX_FRAMES];//page frames
    int front=0;//points to the oldest page in queue
    int page_faults=0;//page fault counter

    //initialize frames to -1(empty)
    for(int i=0;i<num_frames;i++){
        frames[i]=-1;
    }

    printf("\nPage reference string : ");
    for(int i=0;i<num_pages;i++)
        printf("%d ",pages[i]);
    printf("\n\n");

    //process each request
    for(int i=0;i<num_pages;i++){
        int page=pages[i];

        //check if the page is already in memory
        if(!is_page_in_frames(frames,num_frames,page)){
            //page fault occurs, replace the oldest page
            frames[front]=page;
            front = (front+1)%num_frames;//move pointer to the next page
            page_faults++;

            //print the frame content
            printf("Page %d is loaded : ",page);
            for(int j=0;j<num_frames;j++){
                if(frames[j]!=-1)
                    printf("%d ",frames[j]);
                else
                    printf("-");
            }
            printf("\n");
        }
        else{
            printf("Page %d already in frames. No replacement needed.\n",page);
        }
    }
    printf("\nTotal Page Faults : %d\n",page_faults);
}

int main()
{
    int pages[MAX_PAGES]={1,3,0,3,5,6,3,5,1,3};//Example reference string
    int num_pages=10;
    int num_frames=MAX_FRAMES;

    fifo_page_replacement(pages,num_pages,num_frames);

    return 0;
}















Termwork – 8 : File allocation strategies
Date : 10/03/2025

#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 100

//block status : 0=free, 1=allocated
int disk[MAX_BLOCKS] = {0};

//Function to allocate file using sequential allocation
void sequential_allocation(int start,int length){
    if(start + length > MAX_BLOCKS){
        printf("Error: Not enough contiguous state!\n");
        return;
    }

    //check if blocks are free
    for(int i=start;i<start+length;i++){
        if(disk[i]==1){
            printf("Error : Block %d is already allocated!\n",i);
            return;
        }
    }

    //Allocated blocks
    for(int i=start;i<start+length;i++){
        disk[i]=1;
    }
    printf("File allocated using Sequential Allocation from Block %d to %d\n",start,start+length-1);
}

//Node structure for linked allocation
typedef struct Node{
    int block;
    struct Node* next;
}Node;

//fun to allocate file using linked allocation
void linked_allocation(int blocks[],int length){
    Node* head=NULL;
    Node* temp=NULL;

    //Allocated blocks
    for(int i=0;i<length;i++){
        if(disk[blocks[i]]==1){
            printf("Error : Block %d is already allocated!\n",blocks[i]);
            return;
        }
        disk[blocks[i]]=1;

        //create new node
        Node* newNode = (Node*)malloc(sizeof(Node));
        newNode->block = blocks[i];
        newNode->next = NULL;

        if(head==NULL){
            head=newNode;
            temp=newNode;
        }else{
            temp->next = newNode;
            temp=newNode;
        }
    }

    //print allocation
    printf("File allocated using Linked Allocation at blocks : ");
    temp=head;
    while(temp!=NULL){
        printf("%d -> ",temp->block);
        temp=temp->next;
    }
    printf("NULL\n");
    //Free allocated list
    while(head!=NULL){
        temp=head;
        head=head->next;
        free(temp);
    }
}

int main()
{
    int ch,start,length,num_blocks,blocks[MAX_BLOCKS];
    while(1){
        printf("\nFile Allocation Methods : \n");
        printf("1. Sequential Allocation\n");
        printf("2. Linked Allocation\n");
        printf("3. Exit\n");
        printf("Enter choice : ");
        scanf("%d",&ch);

        switch(ch){
            case 1:
                printf("Enter start block and length : ");
                scanf("%d %d",&start,&length);
                sequential_allocation(start,length);
                break;
            case 2:
                printf("Enter number of blocks : ");
                scanf("%d",&num_blocks);
                printf("Enter block numbers : ");
                for(int i=0;i<num_blocks;i++)
                    scanf("%d",&blocks[i]);
                linked_allocation(blocks,num_blocks);
                break;
            case 3:
                printf("\nExiting......\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}











Termwork – 9 : pwd, cd, mkdir, rmdir, cp, rm, mv, cat ; Unix shell scripts
Date : 10/03/2025

 

 
 
 

Termwork – 10 : File Attributes: ls, ls-l, ls-d, file permissions, chmod Unix shell scripts
Date : 10/03/2025

 
 
